/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yodo1.poseidon.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-28")
public class Params implements org.apache.thrift.TBase<Params, Params._Fields>, java.io.Serializable, Cloneable, Comparable<Params> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Params");

  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMS_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsBody", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ParamsTupleSchemeFactory();

  public int num; // required
  public java.util.Map<java.lang.String,Param> paramsBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM((short)1, "num"),
    PARAMS_BODY((short)2, "paramsBody");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM
          return NUM;
        case 2: // PARAMS_BODY
          return PARAMS_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS_BODY, new org.apache.thrift.meta_data.FieldMetaData("paramsBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Param.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Params.class, metaDataMap);
  }

  public Params() {
    this.num = 0;

  }

  public Params(
    int num,
    java.util.Map<java.lang.String,Param> paramsBody)
  {
    this();
    this.num = num;
    setNumIsSet(true);
    this.paramsBody = paramsBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Params(Params other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num = other.num;
    if (other.isSetParamsBody()) {
      java.util.Map<java.lang.String,Param> __this__paramsBody = new java.util.HashMap<java.lang.String,Param>(other.paramsBody.size());
      for (java.util.Map.Entry<java.lang.String, Param> other_element : other.paramsBody.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        Param other_element_value = other_element.getValue();

        java.lang.String __this__paramsBody_copy_key = other_element_key;

        Param __this__paramsBody_copy_value = new Param(other_element_value);

        __this__paramsBody.put(__this__paramsBody_copy_key, __this__paramsBody_copy_value);
      }
      this.paramsBody = __this__paramsBody;
    }
  }

  public Params deepCopy() {
    return new Params(this);
  }

  @Override
  public void clear() {
    this.num = 0;

    this.paramsBody = null;
  }

  public int getNum() {
    return this.num;
  }

  public Params setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getParamsBodySize() {
    return (this.paramsBody == null) ? 0 : this.paramsBody.size();
  }

  public void putToParamsBody(java.lang.String key, Param val) {
    if (this.paramsBody == null) {
      this.paramsBody = new java.util.HashMap<java.lang.String,Param>();
    }
    this.paramsBody.put(key, val);
  }

  public java.util.Map<java.lang.String,Param> getParamsBody() {
    return this.paramsBody;
  }

  public Params setParamsBody(java.util.Map<java.lang.String,Param> paramsBody) {
    this.paramsBody = paramsBody;
    return this;
  }

  public void unsetParamsBody() {
    this.paramsBody = null;
  }

  /** Returns true if field paramsBody is set (has been assigned a value) and false otherwise */
  public boolean isSetParamsBody() {
    return this.paramsBody != null;
  }

  public void setParamsBodyIsSet(boolean value) {
    if (!value) {
      this.paramsBody = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((java.lang.Integer)value);
      }
      break;

    case PARAMS_BODY:
      if (value == null) {
        unsetParamsBody();
      } else {
        setParamsBody((java.util.Map<java.lang.String,Param>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM:
      return getNum();

    case PARAMS_BODY:
      return getParamsBody();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM:
      return isSetNum();
    case PARAMS_BODY:
      return isSetParamsBody();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Params)
      return this.equals((Params)that);
    return false;
  }

  public boolean equals(Params that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_paramsBody = true && this.isSetParamsBody();
    boolean that_present_paramsBody = true && that.isSetParamsBody();
    if (this_present_paramsBody || that_present_paramsBody) {
      if (!(this_present_paramsBody && that_present_paramsBody))
        return false;
      if (!this.paramsBody.equals(that.paramsBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + num;

    hashCode = hashCode * 8191 + ((isSetParamsBody()) ? 131071 : 524287);
    if (isSetParamsBody())
      hashCode = hashCode * 8191 + paramsBody.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Params other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParamsBody()).compareTo(other.isSetParamsBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamsBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsBody, other.paramsBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Params(");
    boolean first = true;

    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramsBody:");
    if (this.paramsBody == null) {
      sb.append("null");
    } else {
      sb.append(this.paramsBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ParamsStandardScheme getScheme() {
      return new ParamsStandardScheme();
    }
  }

  private static class ParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Params> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Params struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMS_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.paramsBody = new java.util.HashMap<java.lang.String,Param>(2*_map0.size);
                java.lang.String _key1;
                Param _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new Param();
                  _val2.read(iprot);
                  struct.paramsBody.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setParamsBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Params struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      if (struct.paramsBody != null) {
        oprot.writeFieldBegin(PARAMS_BODY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.paramsBody.size()));
          for (java.util.Map.Entry<java.lang.String, Param> _iter4 : struct.paramsBody.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            _iter4.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ParamsTupleScheme getScheme() {
      return new ParamsTupleScheme();
    }
  }

  private static class ParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Params> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum()) {
        optionals.set(0);
      }
      if (struct.isSetParamsBody()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetParamsBody()) {
        {
          oprot.writeI32(struct.paramsBody.size());
          for (java.util.Map.Entry<java.lang.String, Param> _iter5 : struct.paramsBody.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Params struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.paramsBody = new java.util.HashMap<java.lang.String,Param>(2*_map6.size);
          java.lang.String _key7;
          Param _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = new Param();
            _val8.read(iprot);
            struct.paramsBody.put(_key7, _val8);
          }
        }
        struct.setParamsBodyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

