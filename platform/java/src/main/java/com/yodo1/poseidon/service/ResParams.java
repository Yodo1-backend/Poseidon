/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yodo1.poseidon.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2017-12-29")
public class ResParams implements org.apache.thrift.TBase<ResParams, ResParams._Fields>, java.io.Serializable, Cloneable, Comparable<ResParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResParams");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_TICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverTicks", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsBody", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResParamsTupleSchemeFactory();

  public int status; // required
  public long serverTicks; // required
  public int num; // required
  public java.util.Map<java.lang.String,Param> paramsBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    SERVER_TICKS((short)2, "serverTicks"),
    NUM((short)3, "num"),
    PARAMS_BODY((short)4, "paramsBody");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // SERVER_TICKS
          return SERVER_TICKS;
        case 3: // NUM
          return NUM;
        case 4: // PARAMS_BODY
          return PARAMS_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __SERVERTICKS_ISSET_ID = 1;
  private static final int __NUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER_TICKS, new org.apache.thrift.meta_data.FieldMetaData("serverTicks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS_BODY, new org.apache.thrift.meta_data.FieldMetaData("paramsBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Param.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResParams.class, metaDataMap);
  }

  public ResParams() {
    this.status = 0;

    this.serverTicks = 0L;

    this.num = 0;

  }

  public ResParams(
    int status,
    long serverTicks,
    int num,
    java.util.Map<java.lang.String,Param> paramsBody)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
    this.serverTicks = serverTicks;
    setServerTicksIsSet(true);
    this.num = num;
    setNumIsSet(true);
    this.paramsBody = paramsBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResParams(ResParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    this.serverTicks = other.serverTicks;
    this.num = other.num;
    if (other.isSetParamsBody()) {
      java.util.Map<java.lang.String,Param> __this__paramsBody = new java.util.HashMap<java.lang.String,Param>(other.paramsBody.size());
      for (java.util.Map.Entry<java.lang.String, Param> other_element : other.paramsBody.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        Param other_element_value = other_element.getValue();

        java.lang.String __this__paramsBody_copy_key = other_element_key;

        Param __this__paramsBody_copy_value = new Param(other_element_value);

        __this__paramsBody.put(__this__paramsBody_copy_key, __this__paramsBody_copy_value);
      }
      this.paramsBody = __this__paramsBody;
    }
  }

  public ResParams deepCopy() {
    return new ResParams(this);
  }

  @Override
  public void clear() {
    this.status = 0;

    this.serverTicks = 0L;

    this.num = 0;

    this.paramsBody = null;
  }

  public int getStatus() {
    return this.status;
  }

  public ResParams setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public long getServerTicks() {
    return this.serverTicks;
  }

  public ResParams setServerTicks(long serverTicks) {
    this.serverTicks = serverTicks;
    setServerTicksIsSet(true);
    return this;
  }

  public void unsetServerTicks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERTICKS_ISSET_ID);
  }

  /** Returns true if field serverTicks is set (has been assigned a value) and false otherwise */
  public boolean isSetServerTicks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERTICKS_ISSET_ID);
  }

  public void setServerTicksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERTICKS_ISSET_ID, value);
  }

  public int getNum() {
    return this.num;
  }

  public ResParams setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
  }

  public int getParamsBodySize() {
    return (this.paramsBody == null) ? 0 : this.paramsBody.size();
  }

  public void putToParamsBody(java.lang.String key, Param val) {
    if (this.paramsBody == null) {
      this.paramsBody = new java.util.HashMap<java.lang.String,Param>();
    }
    this.paramsBody.put(key, val);
  }

  public java.util.Map<java.lang.String,Param> getParamsBody() {
    return this.paramsBody;
  }

  public ResParams setParamsBody(java.util.Map<java.lang.String,Param> paramsBody) {
    this.paramsBody = paramsBody;
    return this;
  }

  public void unsetParamsBody() {
    this.paramsBody = null;
  }

  /** Returns true if field paramsBody is set (has been assigned a value) and false otherwise */
  public boolean isSetParamsBody() {
    return this.paramsBody != null;
  }

  public void setParamsBodyIsSet(boolean value) {
    if (!value) {
      this.paramsBody = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case SERVER_TICKS:
      if (value == null) {
        unsetServerTicks();
      } else {
        setServerTicks((java.lang.Long)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((java.lang.Integer)value);
      }
      break;

    case PARAMS_BODY:
      if (value == null) {
        unsetParamsBody();
      } else {
        setParamsBody((java.util.Map<java.lang.String,Param>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case SERVER_TICKS:
      return getServerTicks();

    case NUM:
      return getNum();

    case PARAMS_BODY:
      return getParamsBody();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case SERVER_TICKS:
      return isSetServerTicks();
    case NUM:
      return isSetNum();
    case PARAMS_BODY:
      return isSetParamsBody();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ResParams)
      return this.equals((ResParams)that);
    return false;
  }

  public boolean equals(ResParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_serverTicks = true;
    boolean that_present_serverTicks = true;
    if (this_present_serverTicks || that_present_serverTicks) {
      if (!(this_present_serverTicks && that_present_serverTicks))
        return false;
      if (this.serverTicks != that.serverTicks)
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_paramsBody = true && this.isSetParamsBody();
    boolean that_present_paramsBody = true && that.isSetParamsBody();
    if (this_present_paramsBody || that_present_paramsBody) {
      if (!(this_present_paramsBody && that_present_paramsBody))
        return false;
      if (!this.paramsBody.equals(that.paramsBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(serverTicks);

    hashCode = hashCode * 8191 + num;

    hashCode = hashCode * 8191 + ((isSetParamsBody()) ? 131071 : 524287);
    if (isSetParamsBody())
      hashCode = hashCode * 8191 + paramsBody.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ResParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServerTicks()).compareTo(other.isSetServerTicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerTicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverTicks, other.serverTicks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParamsBody()).compareTo(other.isSetParamsBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamsBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsBody, other.paramsBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ResParams(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverTicks:");
    sb.append(this.serverTicks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramsBody:");
    if (this.paramsBody == null) {
      sb.append("null");
    } else {
      sb.append(this.paramsBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResParamsStandardScheme getScheme() {
      return new ResParamsStandardScheme();
    }
  }

  private static class ResParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_TICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverTicks = iprot.readI64();
              struct.setServerTicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.paramsBody = new java.util.HashMap<java.lang.String,Param>(2*_map10.size);
                java.lang.String _key11;
                Param _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readString();
                  _val12 = new Param();
                  _val12.read(iprot);
                  struct.paramsBody.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setParamsBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_TICKS_FIELD_DESC);
      oprot.writeI64(struct.serverTicks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      if (struct.paramsBody != null) {
        oprot.writeFieldBegin(PARAMS_BODY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.paramsBody.size()));
          for (java.util.Map.Entry<java.lang.String, Param> _iter14 : struct.paramsBody.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            _iter14.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResParamsTupleScheme getScheme() {
      return new ResParamsTupleScheme();
    }
  }

  private static class ResParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetServerTicks()) {
        optionals.set(1);
      }
      if (struct.isSetNum()) {
        optionals.set(2);
      }
      if (struct.isSetParamsBody()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetServerTicks()) {
        oprot.writeI64(struct.serverTicks);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetParamsBody()) {
        {
          oprot.writeI32(struct.paramsBody.size());
          for (java.util.Map.Entry<java.lang.String, Param> _iter15 : struct.paramsBody.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverTicks = iprot.readI64();
        struct.setServerTicksIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.paramsBody = new java.util.HashMap<java.lang.String,Param>(2*_map16.size);
          java.lang.String _key17;
          Param _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = new Param();
            _val18.read(iprot);
            struct.paramsBody.put(_key17, _val18);
          }
        }
        struct.setParamsBodyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

